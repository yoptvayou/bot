import logging
import re
import os
import base64
import json
import time  # –î–ª—è sleep –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
from datetime import datetime, timedelta, timezone  # –î–æ–±–∞–≤–ª–µ–Ω–æ timezone
from typing import List, Optional, Dict, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import io
import openpyxl
from openpyxl.worksheet.worksheet import Worksheet
import warnings

# –ü–æ–¥–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç openpyxl –æ Data Validation
warnings.filterwarnings("ignore", message="Data Validation extension is not supported and will be removed", category=UserWarning, module="openpyxl.worksheet._reader")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è httpx
logging.getLogger("httpx").setLevel(logging.WARNING)
# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CITY = '–í–æ—Ä–æ–Ω–µ–∂'
SCOPES = [
    'https://www.googleapis.com/auth/drive'  # –£–±—Ä–∞–Ω –¥–æ—Å—Ç—É–ø –∫ Sheets
]
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
LOCAL_CACHE_DIR = "./local_cache"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ main) ---
CREDENTIALS_FILE: str = ""
TELEGRAM_TOKEN: str = ""
PARENT_FOLDER_ID: str = ""
TEMP_FOLDER_ID: str = ""  # –ú–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º
ROOT_FOLDER_YEAR: str = ""


def get_credentials_path() -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Google Credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    encoded = os.getenv("GOOGLE_CREDS_BASE64")
    if not encoded:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDS_BASE64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    try:
        decoded = base64.b64decode(encoded).decode('utf-8')
        creds = json.loads(decoded)
        temp_path = "temp_google_creds.json"
        with open(temp_path, 'w') as f:
            json.dump(creds, f)
        logger.info(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
        return temp_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è GOOGLE_CREDS_BASE64: {e}")
        raise


def init_config():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    global CREDENTIALS_FILE, TELEGRAM_TOKEN, PARENT_FOLDER_ID, TEMP_FOLDER_ID, ROOT_FOLDER_YEAR
    CREDENTIALS_FILE = get_credentials_path()
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
    PARENT_FOLDER_ID = os.getenv("PARENT_FOLDER_ID", "")
    TEMP_FOLDER_ID = os.getenv("TEMP_FOLDER_ID", "")  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –æ—Å—Ç–∞–≤–∏–º
    ROOT_FOLDER_YEAR = str(datetime.now().year)
    if not all([TELEGRAM_TOKEN, PARENT_FOLDER_ID]):  # TEMP_FOLDER_ID –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
        missing = [k for k, v in {"TELEGRAM_TOKEN": TELEGRAM_TOKEN, "PARENT_FOLDER_ID": PARENT_FOLDER_ID}.items() if not v]
        raise RuntimeError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(LOCAL_CACHE_DIR, exist_ok=True)
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞: {os.path.abspath(LOCAL_CACHE_DIR)}")


class GoogleServices:
    """–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è Google API —Å–µ—Ä–≤–∏—Å–æ–≤."""
    def __init__(self):
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        self.drive = build('drive', 'v3', credentials=creds)
        # self.sheets = build('sheets', 'v4', credentials=creds) # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è


class FileManager:
    """–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –Ω–∞ Google –î–∏—Å–∫–µ."""
    def __init__(self, drive_service):
        self.drive = drive_service

    def find_folder(self, parent_id: str, name: str) -> Optional[str]:
        """–ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏."""
        query = f"mimeType='application/vnd.google-apps.folder' and name='{name}' and '{parent_id}' in parents and trashed=false"
        try:
            result = self.drive.files().list(q=query, fields="files(id, name)").execute()
            files = result.get('files', [])
            if files:
                logger.debug(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ '{name}' (ID: {files[0]['id']}) –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_id}")
                return files[0]['id']
            else:
                logger.debug(f"üìÅ –ü–∞–ø–∫–∞ '{name}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_id}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ '{name}' –≤ {parent_id}: {e}")
            return None

    def find_file(self, folder_id: str, filename: str) -> Optional[str]:
        """–ù–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ."""
        query = f"name='{filename}' and '{folder_id}' in parents and trashed=false"
        try:
            result = self.drive.files().list(q=query, fields="files(id, name, mimeType)").execute()
            files = result.get('files', [])
            if files:
                file_info = files[0]
                logger.debug(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª '{filename}' (ID: {file_info['id']}) –≤ –ø–∞–ø–∫–µ {folder_id}")
                return file_info['id']
            else:
                logger.debug(f"üìÑ –§–∞–π–ª '{filename}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {folder_id}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ '{filename}' –≤ {folder_id}: {e}")
            return None

    def get_file_modified_time(self, file_id: str) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive."""
        try:
            file_info = self.drive.files().get(fileId=file_id, fields="modifiedTime").execute()
            modified_time_str = file_info.get('modifiedTime')
            if modified_time_str:
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π UTC
                modified_time = datetime.strptime(modified_time_str, "%Y-%m-%dT%H:%M:%S.%fZ")
                modified_time = modified_time.replace(tzinfo=timezone.utc)
                logger.debug(f"üïí –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ Drive {file_id}: {modified_time}")
                return modified_time
            else:
                logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ñ–∞–π–ª–∞ {file_id}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None

    def download_file(self, file_id: str, local_filename: str) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google Drive –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª."""
        try:
            logger.info(f"‚¨áÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_id} –≤ {local_filename}")
            request = self.drive.files().get_media(fileId=file_id)
            with open(local_filename, 'wb') as fh:
                downloader = MediaIoBaseDownload(fh, request)
                done = False
                while done is False:
                    status, done = downloader.next_chunk()
                    progress = int(status.progress() * 100)
                    logger.debug(f"‚¨áÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file_id}: {progress}%")
            logger.info(f"‚úÖ –§–∞–π–ª {file_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∫–∞–∫ {local_filename}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id} –≤ {local_filename}: {e}")
            return False

    def list_files_in_folder(self, folder_id: str, max_results: int = 100) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ Google Drive."""
        try:
            query = f"'{folder_id}' in parents and trashed=false"
            results = self.drive.files().list(
                q=query,
                pageSize=max_results,
                fields="nextPageToken, files(id, name, mimeType, size)"
            ).execute()
            items = results.get('files', [])
            logger.debug(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ {folder_id}")
            return items
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ {folder_id}: {e}")
            return []


class LocalDataSearcher:
    """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Excel —Ñ–∞–π–ª–µ."""
    @staticmethod
    def search_by_number(local_filepath: str, target_number: str, sheet_name: str = "–¢–µ—Ä–º–∏–Ω–∞–ª—ã") -> List[str]:
        """
        –ò—â–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º .xlsm —Ñ–∞–π–ª–µ, –≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü F (–∏–Ω–¥–µ–∫—Å 5) == target_number.
        """
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ '{target_number}' –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ {local_filepath}, –ª–∏—Å—Ç '{sheet_name}'")
        target_number = target_number.strip().upper()
        results = []
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É Excel
            workbook = openpyxl.load_workbook(local_filepath, read_only=True, data_only=True)
            if sheet_name not in workbook.sheetnames:
                logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ {local_filepath}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: {workbook.sheetnames}")
                workbook.close()
                return results
            sheet: Worksheet = workbook[sheet_name]
            logger.debug(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞ '{sheet_name}' –∏–∑ —Ñ–∞–π–ª–∞ {local_filepath}")
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            header_row = None
            try:
                header_row = list(sheet.iter_rows(min_row=1, max_row=1, values_only=True))[0]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏, –∑–∞–º–µ–Ω—è—è None –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                header_names = [str(cell) if cell is not None else "" for cell in header_row]
                logger.debug(f"üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ '{sheet_name}': {header_names[:10]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {e}")
                header_names = None  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤–∞—è - –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            for row_num, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
                if len(row) > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É F (–∏–Ω–¥–µ–∫—Å 5)
                    cell_f_value = str(row[5]).strip().upper() if len(row) > 5 and row[5] is not None else ""
                    if cell_f_value == target_number:
                        logger.info(f"üîç –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ '{local_filepath}', –ª–∏—Å—Ç '{sheet_name}', —Å—Ç—Ä–æ–∫–∞ {row_num}")
                        # –ë–µ—Ä—ë–º A-Z (–ø–µ—Ä–≤—ã–µ 26 —Å—Ç–æ–ª–±—Ü–æ–≤), —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
                        cleaned_data = []
                        for col_index, cell in enumerate(row[:26]):
                            cell_value = str(cell).strip() if cell is not None else ""
                            if cell_value:
                                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ (A, B, C, ...)
                                column_letter = openpyxl.utils.get_column_letter(col_index + 1)  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1
                                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                                header_name = header_names[col_index] if header_names and col_index < len(header_names) and header_names[col_index] else "N/A"
                                cleaned_data.append(f"{column_letter}({header_name}):'{cell_value}'")
                                logger.debug(f"    üìÑ [{column_letter}({header_name})] = '{cell_value}'")
                        results.append(" | ".join(cleaned_data))
            workbook.close()
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ {local_filepath}: {e}", exc_info=True)  # –î–æ–±–∞–≤–ª–µ–Ω exc_info –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        return results


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–∫–µ –∏ –≥—Ä—É–ø–ø–∞—Ö)."""
    if update.message:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "‚Ä¢ `/s 123456` - –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É\n"
            "‚Ä¢ `/path` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏\n"
            "‚Ä¢ `/test –î–î–ú–ú–ì–ì` - —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/test 010125`)\n"
            "‚Ä¢ `@–≤–∞—à_–±–æ—Ç 123456` - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö"
        )


async def show_path(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ Google Drive –ø–æ PARENT_FOLDER_ID."""
    if not update.message:
        return
    user_id = update.effective_user.id
    logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É /path")
    try:
        await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –Ω–∞ Google Drive...")
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        root_folder_id = PARENT_FOLDER_ID
        try:
            root_folder_info = gs.drive.files().get(fileId=root_folder_id, fields="name").execute()
            root_folder_name = root_folder_info.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        except Exception:
            root_folder_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞'
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ —Å ID {root_folder_id}")
        path_info = f"üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ Google Drive: `{root_folder_name}` (ID: `{root_folder_id}`)\n"
        try:
            items = fm.list_files_in_folder(root_folder_id, max_results=100)
            if not items:
                path_info += "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫."
            else:
                path_info += f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):\n"
                folders = sorted([item for item in items if item.get('mimeType') == 'application/vnd.google-apps.folder'],
                                 key=lambda x: x.get('name', '').lower())
                files = sorted([item for item in items if item.get('mimeType') != 'application/vnd.google-apps.folder'],
                               key=lambda x: x.get('name', '').lower())
                for folder in folders:
                    name = folder.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    fid = folder.get('id', 'N/A')
                    path_info += f"üìÅ `{name}/` (ID: `{fid}`)\n"
                for file in files:
                    name = file.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    fid = file.get('id', 'N/A')
                    mime_type = file.get('mimeType', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                    size = file.get('size', None)
                    size_str = f" ({int(size)} –±–∞–π—Ç)" if size and size.isdigit() else ""
                    path_info += f"üìÑ `{name}`{size_str} (ID: `{fid}`, –¢–∏–ø: `{mime_type}`)\n"
        except Exception as e:
            path_info += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏: {e}\n"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ {root_folder_id}: {e}")
        if len(path_info) > 4096:
            lines = path_info.split('\n')
            current_part = ""
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    await update.message.reply_text(current_part, parse_mode='Markdown')
                    current_part = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ `/path`:\n" + line + '\n'
                else:
                    current_part += line + '\n'
            if current_part:
                await update.message.reply_text(current_part, parse_mode='Markdown')
        else:
            await update.message.reply_text(path_info, parse_mode='Markdown')
        logger.info(f"üì§ –û—Ç–≤–µ—Ç –Ω–∞ /path –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ Google Drive: {e}"
        logger.error(error_msg, exc_info=True)
        if update.message:
            await update.message.reply_text(error_msg)


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ –¥–∞—Ç–µ."""
    if not update.message:
        return
    user_id = update.effective_user.id
    logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É /test")
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/test –î–î–ú–ú–ì–ì`\n"
            "–ü—Ä–∏–º–µ—Ä: `/test 010125`",
            parse_mode='Markdown'
        )
        return
    date_str = context.args[0].strip()
    if not (len(date_str) == 6 and date_str.isdigit()):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ù—É–∂–Ω–æ 6 —Ü–∏—Ñ—Ä: –î–î–ú–ú–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: `010125` –¥–ª—è 1 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞",
            parse_mode='Markdown'
        )
        return
    try:
        day = date_str[:2]
        month = date_str[2:4]
        year_short = date_str[4:]
        year_full = f"20{year_short}"
        month_names = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
                       "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
        try:
            month_index = int(month) - 1
            month_name = month_names[month_index] if 0 <= month_index <= 11 else "???"
        except (ValueError, IndexError):
            month_name = "???"
        filename = f"–ê–ü–ü_–°–∫–ª–∞–¥_{date_str}_{CITY}.xlsm"
        path_structure = (
            f"{year_full}\n"
            f"  ‚îî‚îÄ‚îÄ –∞–∫—Ç—ã\n"
            f"      ‚îî‚îÄ‚îÄ {month} - {month_name}\n"
            f"          ‚îî‚îÄ‚îÄ {date_str}\n"
            f"              ‚îî‚îÄ‚îÄ {filename}"
        )
        response = (
            f"üìÖ –î–∞—Ç–∞: `{day}.{month}.20{year_short}`\n"
            f"üìÇ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∏ —Ñ–∞–π–ª:\n"
            f"```\n"
            f"{path_structure}\n"
            f"```"
        )
        await update.message.reply_text(response, parse_mode='Markdown')
        logger.info(f"üì§ –û—Ç–≤–µ—Ç –Ω–∞ /test ({date_str}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.", parse_mode='Markdown')


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if update.message:
        user_id = update.effective_user.id
        command = update.message.text.split()[0] if update.message.text else "N/A"
        logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {command}")
        help_text = (
            "–ö–æ–∂–∞–Ω—ã–π, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª
