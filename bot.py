import logging
import re
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è httpx, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å verbosity
logging.getLogger("httpx").setLevel(logging.WARNING)

# ‚Äî‚Äî‚Äî –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
import base64
import json

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º Google Credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_credentials_path():
    encoded = os.getenv("GOOGLE_CREDS_BASE64")
    if not encoded:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDS_BASE64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 ‚Üí JSON
    decoded = base64.b64decode(encoded).decode('utf-8')
    creds = json.loads(decoded)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–Ω—É–∂–µ–Ω –¥–ª—è Google API)
    temp_path = "temp_google_creds.json"
    with open(temp_path, 'w') as f:
        json.dump(creds, f)
    return temp_path

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CREDENTIALS_FILE = get_credentials_path()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather
PARENT_FOLDER_ID = os.getenv("PARENT_FOLDER_ID")  # –ü–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç "2025"
TEMP_FOLDER_ID = os.getenv("TEMP_FOLDER_ID")  # –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏–π
ROOT_FOLDER_YEAR = '2025'
CITY = '–í–æ—Ä–æ–Ω–µ–∂'

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

class GoogleServices:
    """–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è Google API —Å–µ—Ä–≤–∏—Å–æ–≤"""
    def __init__(self):
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        self.drive = build('drive', 'v3', credentials=creds)
        self.sheets = build('sheets', 'v4', credentials=creds)

class FileManager:
    """–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –Ω–∞ Google –î–∏—Å–∫–µ"""
    def __init__(self, drive_service):
        self.drive = drive_service

    def find_folder(self, parent_id: str, name: str) -> str:
        """–ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        query = f"mimeType='application/vnd.google-apps.folder' and name='{name}' " \
                f"and '{parent_id}' in parents and trashed=false"
        result = self.drive.files().list(q=query, fields="files(id, name)").execute()
        files = result.get('files', [])
        if files:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ '{name}' (ID: {files[0]['id']}) –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_id}")
            return files[0]['id']
        else:
            logger.debug(f"–ü–∞–ø–∫–∞ '{name}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_id}")
            return None

    def find_file(self, folder_id: str, filename: str) -> str:
        """–ù–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ"""
        query = f"name='{filename}' and '{folder_id}' in parents and trashed=false"
        result = self.drive.files().list(q=query, fields="files(id, name)").execute()
        files = result.get('files', [])
        if files:
            logger.debug(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª '{filename}' (ID: {files[0]['id']}) –≤ –ø–∞–ø–∫–µ {folder_id}")
            return files[0]['id']
        else:
            logger.debug(f"–§–∞–π–ª '{filename}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {folder_id}")
            return None

    def create_sheets_copy(self, file_id: str, name: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é Excel –∫–∞–∫ Google –¢–∞–±–ª–∏—Ü—É –≤ TEMP_FOLDER_ID"""
        metadata = {
            'name': name,
            'parents': [TEMP_FOLDER_ID],
            'mimeType': 'application/vnd.google-apps.spreadsheet'
        }
        try:
            file = self.drive.files().copy(fileId=file_id, body=metadata).execute()
            logger.info(f"–ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {name} (ID: {file['id']})")
            return file['id']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None

    def safe_delete(self, file_id: str):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤ TEMP_FOLDER_ID"""
        try:
            file_info = self.drive.files().get(fileId=file_id, fields="parents").execute()
            if TEMP_FOLDER_ID in file_info.get('parents', []):
                self.drive.files().delete(fileId=file_id).execute()
                logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {file_id}")
            else:
                logger.warning(f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ (–Ω–µ –≤ TEMP): {file_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

class DataSearcher:
    """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü–µ"""
    def __init__(self, sheets_service):
        self.sheets = sheets_service

    def read_sheet(self, spreadsheet_id: str, range_name: str) -> list:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.sheets.spreadsheets().values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            return result.get('values', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []

    def search_by_sn(self, rows: list, target_sn: str) -> list:
        """
        –ò—â–µ—Ç —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü F (–∏–Ω–¥–µ–∫—Å 5) == target_sn (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        """
        target_sn = target_sn.strip().upper()
        results = []
        for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(row) > 5 and row[5].strip().upper() == target_sn:
                # –ë–µ—Ä—ë–º A-Z, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
                cleaned = [cell.strip() for cell in row[:26] if cell.strip()]
                results.append(" | ".join(cleaned))
        return results

# ‚Äî‚Äî‚Äî –û–°–ù–û–í–ù–û–ô –ë–û–¢ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–∫–µ –∏ –≥—Ä—É–ø–ø–∞—Ö)"""
    if update.message: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É –°–ù.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "‚Ä¢ `/s –°–ù12345`\n"
            "‚Ä¢ `@–≤–∞—à_–±–æ—Ç –°–ù12345`"
        )

def extract_sn(query: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –°–ù –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ù12345)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–ª–∏ None
    """
    match = re.search(r'–°–ù[–ê-–Ø–∞-—èA-Za-z0-9]+', query, re.IGNORECASE)
    return match.group(0).strip().upper() if match else None

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è handle_query")
        return

    message = update.message
    sn = extract_sn(query)
    if not sn:
        await message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –°–ù. –ü—Ä–∏–º–µ—Ä: `–°–ù12345`", parse_mode='Markdown')
        return

    await message.reply_text(f"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É: `{sn}`", parse_mode='Markdown')

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        ds = DataSearcher(gs.sheets)

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
        today = datetime.now()
        yesterday = today - timedelta(days=1)
        dates_to_try = [today, yesterday]
        file_id = None
        used_date = None

        logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –°–ù: {sn}")
        logger.info(f"PARENT_FOLDER_ID: {PARENT_FOLDER_ID}")

        for target_date in dates_to_try:
            filename = f"–ê–ü–ü_–°–∫–ª–∞–¥_{target_date.strftime('%d%m%y')}_{CITY}.xlsm"
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞: {filename}")

            # –ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –≥–æ–¥–∞ (ROOT_FOLDER_YEAR)
            logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –≥–æ–¥–∞ '{ROOT_FOLDER_YEAR}' –≤–Ω—É—Ç—Ä–∏ PARENT_FOLDER_ID '{PARENT_FOLDER_ID}'")
            root_folder = fm.find_folder(PARENT_FOLDER_ID, ROOT_FOLDER_YEAR)
            if not root_folder:
                logger.warning(f"–ü–∞–ø–∫–∞ –≥–æ–¥–∞ '{ROOT_FOLDER_YEAR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{PARENT_FOLDER_ID}'")
                continue
            logger.debug(f"–ü–∞–ø–∫–∞ –≥–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞: ID={root_folder}")

            # –ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞: "01 - —è–Ω–≤–∞—Ä—å"
            month_names = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
                           "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
            month_num = target_date.month
            month_folder_name = f"{target_date.strftime('%m')} - {month_names[month_num - 1]}"
            logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞ '{month_folder_name}' –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –≥–æ–¥–∞ '{root_folder}'")
            month_folder = fm.find_folder(root_folder, month_folder_name)
            if not month_folder:
                logger.warning(f"–ü–∞–ø–∫–∞ –º–µ—Å—è—Ü–∞ '{month_folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ –≥–æ–¥–∞ (ID: {root_folder})")
                continue
            logger.debug(f"–ü–∞–ø–∫–∞ –º–µ—Å—è—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: ID={month_folder}")

            # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –º–µ—Å—è—Ü–∞
            logger.debug(f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ '{filename}' –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞ '{month_folder}'")
            file_id = fm.find_file(month_folder, filename)
            if file_id:
                logger.info(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ID={file_id}")
                used_date = target_date
                break # –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            else:
                logger.warning(f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ –º–µ—Å—è—Ü–∞ (ID: {month_folder})")

        if not file_id:
            await message.reply_text("‚ùå –§–∞–π–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        date_str = used_date.strftime("%d.%m.%Y")
        await message.reply_text(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∑–∞ {date_str}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É
        temp_name = f"TEMP_{filename.replace('.xlsm', '')}"
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ {file_id} —Å –∏–º–µ–Ω–µ–º {temp_name}")
        spreadsheet_id = fm.create_sheets_copy(file_id, temp_name)
        if not spreadsheet_id:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
            return

        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logger.debug(f"–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã {spreadsheet_id}, –ª–∏—Å—Ç '–¢–µ—Ä–º–∏–Ω–∞–ª—ã!A:Z'")
        rows = ds.read_sheet(spreadsheet_id, "–¢–µ—Ä–º–∏–Ω–∞–ª—ã!A:Z")
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã {spreadsheet_id}")
        fm.safe_delete(spreadsheet_id)  # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è

        if not rows:
            await message.reply_text("üìã –õ–∏—Å—Ç '–¢–µ—Ä–º–∏–Ω–∞–ª—ã' –ø—É—Å—Ç.")
            return

        # –ü–æ–∏—Å–∫
        logger.debug(f"–ü–æ–∏—Å–∫ –°–ù '{sn}' –≤ –¥–∞–Ω–Ω—ã—Ö")
        results = ds.search_by_sn(rows, sn)
        if results:
            response = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ `{sn}`:\n\n" + "\n\n".join(results)
            if len(response) > 4096:
                response = response[:4090] + "\n..."
        else:
            response = f"‚ùå –ó–∞–ø–∏—Å—å —Å `{sn}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        await message.reply_text(response, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–∫–∏
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    bot_username = context.bot.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    is_command = text.startswith("/s")
    is_mention = re.match(rf'@{re.escape(bot_username)}\b', text, re.IGNORECASE)

    if not (is_command or is_mention):
        return  # –ù–µ –Ω–∞—à–µ

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
    if is_command:
        query = ' '.join(context.args) if context.args else ''
    else:
        query = re.sub(rf'@{re.escape(bot_username)}\s*', '', text, flags=re.IGNORECASE).strip()

    await handle_query(update, context, query)

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_TOKEN", "PARENT_FOLDER_ID", "TEMP_FOLDER_ID"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("s", lambda u, c: handle_query(u, c, ' '.join(c.args) if c.args else '')))
    app.add_handler(MessageHandler(
        filters.TEXT & (filters.ChatType.CHANNEL | filters.ChatType.GROUPS | filters.ChatType.PRIVATE),
        handle_message
    ))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ª–∏—á–∫–∞, –≥—Ä—É–ø–ø—ã, –∫–∞–Ω–∞–ª—ã (–ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏).")
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ROOT_FOLDER_YEAR={ROOT_FOLDER_YEAR}, CITY={CITY}")
    app.run_polling()

if __name__ == '__main__':
    main()
