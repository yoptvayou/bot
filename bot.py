import logging
import re
import os
import base64
import json
import time
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import openpyxl # type: ignore
import warnings
import sys
import subprocess
import io
import asyncio
from concurrent.futures import ThreadPoolExecutor

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç openpyxl
warnings.filterwarnings("ignore", message="Data Validation extension is not supported", category=UserWarning)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CITY = '–í–æ—Ä–æ–Ω–µ–∂'
SCOPES = ['https://www.googleapis.com/auth/drive']
LOCAL_CACHE_DIR = "./local_cache"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
CREDENTIALS_FILE: str = ""
TELEGRAM_TOKEN: str = ""
PARENT_FOLDER_ID: str = ""
TEMP_FOLDER_ID: str = ""
ROOT_FOLDER_YEAR: str = ""
BLACKLIST_FILE_ID: str = ""
WHITELIST_FILE_ID: str = ""
LAST_FILE_ID: Optional[str] = None
LAST_FILE_DATE: Optional[datetime] = None
LAST_FILE_DRIVE_TIME: Optional[datetime] = None
LAST_FILE_LOCAL_PATH: Optional[str] = None
executor = ThreadPoolExecutor(max_workers=4)  # –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞

# --- –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) ---
ALLOWED_USERS = {'tupikin_ik', 'yoptvayou'}

def get_credentials_path() -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Google Credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    encoded = os.getenv("GOOGLE_CREDS_BASE64")
    if not encoded:
        raise RuntimeError("GOOGLE_CREDS_BASE64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    try:
        decoded = base64.b64decode(encoded).decode('utf-8')
        creds = json.loads(decoded)
        temp_path = "temp_google_creds.json"
        with open(temp_path, 'w') as f:
            json.dump(creds, f)
        logger.info(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {temp_path}")
        return temp_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è GOOGLE_CREDS_BASE64: {e}")
        raise


def init_config():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    global CREDENTIALS_FILE, TELEGRAM_TOKEN, PARENT_FOLDER_ID, TEMP_FOLDER_ID, ROOT_FOLDER_YEAR, BLACKLIST_FILE_ID, WHITELIST_FILE_ID
    CREDENTIALS_FILE = get_credentials_path()
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
    PARENT_FOLDER_ID = os.getenv("PARENT_FOLDER_ID", "")
    TEMP_FOLDER_ID = os.getenv("TEMP_FOLDER_ID", "")
    BLACKLIST_FILE_ID = os.getenv("BLACKLIST_FILE_ID", "")
    WHITELIST_FILE_ID = os.getenv("WHITELIST_FILE_ID", "")
    ROOT_FOLDER_YEAR = str(datetime.now().year)

    if not TELEGRAM_TOKEN or not PARENT_FOLDER_ID or not BLACKLIST_FILE_ID or not WHITELIST_FILE_ID:
        missing = []
        if not TELEGRAM_TOKEN: missing.append("TELEGRAM_TOKEN")
        if not PARENT_FOLDER_ID: missing.append("PARENT_FOLDER_ID")
        if not BLACKLIST_FILE_ID: missing.append("BLACKLIST_FILE_ID")
        if not WHITELIST_FILE_ID: missing.append("WHITELIST_FILE_ID")
        raise RuntimeError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

    os.makedirs(LOCAL_CACHE_DIR, exist_ok=True)
    logger.info(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à: {os.path.abspath(LOCAL_CACHE_DIR)}")


class GoogleServices:
    """Google API."""
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
            cls._instance.drive = build('drive', 'v3', credentials=creds)
        return cls._instance



class AccessManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º: —á—ë—Ä–Ω—ã–π/–±–µ–ª—ã–π —Å–ø–∏—Å–∫–∏ –ø–æ username."""
    def __init__(self, drive_service):
        self.drive = drive_service
        self.blacklist = set()
        self.whitelist = set()

    def download_list(self, file_id: str) -> List[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ username (–±–µ–∑ @, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)."""
        try:
            request = self.drive.files().get_media(fileId=file_id)
            file_data = io.BytesIO()
            downloader = MediaIoBaseDownload(file_data, request)
            done = False
            while not done:
                status, done = downloader.next_chunk()
            file_data.seek(0)
            content = file_data.read().decode('utf-8')
            # –û—á–∏—â–∞–µ–º: —É–¥–∞–ª—è–µ–º @, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            usernames = []
            for line in content.splitlines():
                cleaned = line.strip().lower().replace('@', '')
                if cleaned:
                    usernames.append(cleaned)
            return usernames
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return []

    def update_lists(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á—ë—Ä–Ω—ã–π –∏ –±–µ–ª—ã–π —Å–ø–∏—Å–∫–∏."""
        if WHITELIST_FILE_ID:
            self.whitelist = set(self.download_list(WHITELIST_FILE_ID))
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {len(self.whitelist)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            logger.warning("‚ö†Ô∏è WHITELIST_FILE_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

        if BLACKLIST_FILE_ID:
            self.blacklist = set(self.download_list(BLACKLIST_FILE_ID))
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(self.blacklist)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            logger.warning("‚ö†Ô∏è BLACKLIST_FILE_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

    def is_allowed(self, username: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ username:
        - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (ALLOWED_USERS) –≤—Å–µ–≥–¥–∞ –¥–æ–ø—É—â–µ–Ω—ã
        - –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ
        - –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: –µ—Å–ª–∏ –∑–∞–¥–∞–Ω ‚Äî —Ç–æ–ª—å–∫–æ –æ–Ω —Ä–µ—à–∞–µ—Ç
        """
        if not username:
            return False

        username_lower = username.lower()

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
        if username_lower in {u.lower() for u in ALLOWED_USERS}:
            return True

        # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –±–µ–ª–æ–º
        if username_lower in self.blacklist:
            return False

        # –ï—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —Ç–æ–ª—å–∫–æ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø
        if self.whitelist and username_lower not in self.whitelist:
            return False

        # –ï—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —á—ë—Ä–Ω–æ–≥–æ
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
access_manager: Optional[AccessManager] = None

def preload_latest_file():
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –∏—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
    global LAST_FILE_ID, LAST_FILE_DATE, LAST_FILE_DRIVE_TIME, LAST_FILE_LOCAL_PATH

    gs = GoogleServices()
    fm = FileManager(gs.drive)
    today = datetime.now()

    logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞...")

    for days_back in range(31):
        target_date = today - timedelta(days=days_back)
        filename = f"–ê–ü–ü_–°–∫–ª–∞–¥_{target_date.strftime('%d%m%y')}_{CITY}.xlsm"

        # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–∞–ø–æ–∫: –∞–∫—Ç—ã ‚Üí –º–µ—Å—è—Ü ‚Üí –¥–µ–Ω—å
        acts = fm.find_folder(PARENT_FOLDER_ID, "–∞–∫—Ç—ã")
        if not acts:
            continue

        month_num = target_date.month
        month_name = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
                      "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"][month_num - 1]
        month_folder = fm.find_folder(acts, f"{target_date.strftime('%m')} - {month_name}")
        if not month_folder:
            continue

        date_folder = fm.find_folder(month_folder, target_date.strftime('%d%m%y'))
        if not date_folder:
            continue

        file_id = fm.find_file(date_folder, filename)
        if file_id:
            drive_time = fm.get_file_modified_time(file_id)
            if not drive_time:
                continue

            local_path = os.path.join(LOCAL_CACHE_DIR, f"cache_{target_date.strftime('%Y%m%d')}.xlsm")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
            download_needed = True
            if os.path.exists(local_path):
                local_time = datetime.fromtimestamp(os.path.getmtime(local_path), tz=timezone.utc)
                if drive_time <= local_time:
                    download_needed = False

            if download_needed:
                logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {filename} ‚Üí {local_path}")
                if not fm.download_file(file_id, local_path):
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
                    continue
                logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {local_path}")
            else:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à: {local_path}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            LAST_FILE_ID = file_id
            LAST_FILE_DATE = target_date
            LAST_FILE_DRIVE_TIME = drive_time
            LAST_FILE_LOCAL_PATH = local_path

            logger.info(f"üìÅ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename} (ID: {file_id}) –æ—Ç {target_date.strftime('%d.%m.%Y')}")
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ–∞–π–ª –∑–∞ 30 –¥–Ω–µ–π
    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
    LAST_FILE_ID = None
    LAST_FILE_DATE = None
    LAST_FILE_DRIVE_TIME = None
    LAST_FILE_LOCAL_PATH = None

def extract_number(query: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Ç–∏—Ä–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None.
    """
    if not query:
        return None
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean = re.sub(r'[^A-Za-z0-9\-]', '', query.strip())
    if clean and re.fullmatch(r'[A-Za-z0-9\-]+', clean):
        return clean.upper()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    user = update.effective_user
    chat_type = update.message.chat.type
    if chat_type == 'private' and (not user.username or user.username not in ALLOWED_USERS):
        await update.message.reply_text(
            "–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π, –¥—è–¥—è?\n"
            "–ù–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ –≤—Ö–æ–¥–∏.\n"
            "–•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–ª–∞—Ç–∏ –±–∞–±–∫–∏ –∏–ª–∏ –ª–µ–∂–∏ –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ –¥–æ —É—Ç—Ä–∞."
        )
        return

    await update.message.reply_text(
            "–û, —Å–º–æ—Ç—Ä–∏-–∫–∞ ‚Äî –≥–æ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ!\n"
            "–¢–æ–ª—å–∫–æ –Ω–µ —Å—Ç–æ–π –∫–∞–∫ –ª–æ—Ö —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ‚Äî –≥–æ–≤–æ—Ä–∏, —á—Ç–æ –Ω–∞–¥–æ.\n"
            "\n"
            "‚Ä¢ <code>/s 123456</code> ‚Äî –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ –°–ù, –µ—Å–ª–∏ –Ω–µ –±–æ–∏—à—å—Å—è\n"
            "‚Ä¢ <code>/path</code> ‚Äî –≥–ª—è–Ω—É—Ç—å, —á—Ç–æ —É –Ω–∞—Å –≤ –ø–∞–ø–∫–µ –∑–∞–≤–∞–ª—è–ª–æ—Å—å\n"
            "‚Ä¢ <code>/reload_lists</code> ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π –∏ —Å–≤–æ–∏—Ö\n"
            "‚Ä¢ <code>/restart</code> ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ <code>/refresh</code> ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫–ª–∞–¥–∞\n"
            "‚Ä¢ <code>@Sklad_bot 123456</code> ‚Äî –∫—Ä–∏–∫–Ω–∏ –≤ —á–∞—Ç–∏–∫–µ, —è –Ω–∞–π–¥—É\n",
            parse_mode='HTML'
    )

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart ---
async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if not update.message or not update.effective_user:
        return
    user = update.effective_user
    if not user.username or user.username.lower() not in {u.lower() for u in ALLOWED_USERS}:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    try:
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logger.info(f"üîÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.username} –∑–∞–ø—É—Å—Ç–∏–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–æ—Ç–∞.")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        subprocess.Popen([sys.executable] + sys.argv)
        await update.message.reply_text("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞.")

async def show_path(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å."""
    if update.message.chat.type == 'private':
        user = update.effective_user
        if not user.username or not access_manager.is_allowed(user.username):
            await update.message.reply_text(
                "–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π, –∞?\n"
                "–ù–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ –≤—Ö–æ–¥–∏.\n"
                "–•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–ª–∞—Ç–∏ –±–∞–±–∫–∏ –∏–ª–∏ –ª–µ–∂–∏ –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ –¥–æ —É—Ç—Ä–∞."
            )
            return

    try:
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        root_id = PARENT_FOLDER_ID
        items = fm.list_files_in_folder(root_id, max_results=100)

        text = f"üóÇ <b>–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞</b> (ID: <code>{root_id}</code>)\n"
        if not items:
            text += "–ó–¥–µ—Å—å –¥–∞–∂–µ –ø–∞—É–∫ –Ω–µ —Å–µ–ª–∏—Ç—Å—è ‚Äî –ø—É—Å—Ç–æ."
        else:
            folders = [i for i in items if i['mimeType'] == 'application/vnd.google-apps.folder']
            files = [i for i in items if i['mimeType'] != 'application/vnd.google-apps.folder']

            if folders:
                text += "<b>–ü–æ–¥–ø–∞–ø–∫–∏:</b>\n"
                for f in sorted(folders, key=lambda x: x['name'].lower()):
                    text += f"üìÅ <code>{f['name']}/</code>\n"
                text += "\n"

            if files:
                text += "<b>–§–∞–π–ª—ã:</b>\n"
                for f in sorted(files, key=lambda x: x['name'].lower()):
                    size = f" ({f['size']} –±–∞–π—Ç)" if f.get('size') else ""
                    text += f"üìÑ <code>{f['name']}</code>{size}\n"

        await update.message.reply_text(text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /path: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )

async def reload_lists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á—ë—Ä–Ω–æ–≥–æ –∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    if not update.message or not update.effective_user:
        return

    user = update.effective_user
    if not user.username or user.username.lower() not in {u.lower() for u in ALLOWED_USERS}:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not access_manager:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    access_manager.update_lists()
    await update.message.reply_text(
        f"‚úÖ –°–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n"
        f"–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {len(access_manager.whitelist)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(access_manager.blacklist)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    logger.info(f"üîÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.username} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª —Å–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–∞.")


class FileManager:
    """–†–∞–±–æ—Ç–∞ —Å Google Drive."""
    def __init__(self, drive):
        self.drive = drive

    def find_folder(self, parent_id: str, name: str) -> Optional[str]:
        query = f"mimeType='application/vnd.google-apps.folder' and name='{name}' and '{parent_id}' in parents and trashed=false"
        try:
            res = self.drive.files().list(q=query, fields="files(id)").execute()
            folder_id = res['files'][0]['id'] if res['files'] else None
            if folder_id:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: '{name}' (ID: {folder_id})")
            else:
                logger.debug(f"üìÅ –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{name}' –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ {parent_id}")
            return folder_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ '{name}': {e}")
            return None

    def find_file(self, folder_id: str, filename: str) -> Optional[str]:
        query = f"name='{filename}' and '{folder_id}' in parents and trashed=false"
        try:
            res = self.drive.files().list(q=query, fields="files(id)").execute()
            file_id = res['files'][0]['id'] if res['files'] else None
            if file_id:
                logger.info(f"üìé –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: '{filename}' (ID: {file_id})")
            else:
                logger.debug(f"üìÑ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: '{filename}' –≤ –ø–∞–ø–∫–µ {folder_id}")
            return file_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ '{filename}': {e}")
            return None

    def get_file_modified_time(self, file_id: str) -> Optional[datetime]:
        try:
            info = self.drive.files().get(fileId=file_id, fields="modifiedTime").execute()
            t = info['modifiedTime']
            dt = datetime.strptime(t, "%Y-%m-%dT%H:%M:%S.%fZ")
            return dt.replace(tzinfo=timezone.utc)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None

    def download_file(self, file_id: str, local_path: str) -> bool:
        try:
            request = self.drive.files().get_media(fileId=file_id)
            with open(local_path, 'wb') as fh:
                downloader = MediaIoBaseDownload(fh, request)
                done = False
                while not done:
                    status, done = downloader.next_chunk()
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: ID={file_id}, –ø—É—Ç—å={local_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ID={file_id} –≤ {local_path}: {e}")
            return False

    def list_files_in_folder(self, folder_id: str, max_results: int = 100) -> List[Dict]:
        try:
            query = f"'{folder_id}' in parents and trashed=false"
            res = self.drive.files().list(q=query, pageSize=max_results, fields="files(id, name, mimeType, size)").execute()
            return res.get('files', [])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id}: {e}")
            return []


class LocalDataSearcher:
    """–ü–æ–∏—Å–∫ –≤ Excel –ø–æ –°–ù –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É."""
    @staticmethod
    async def search_by_number_async(filepath: str, number: str) -> List[str]:
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(executor, LocalDataSearcher._search_by_number_sync, filepath, number)
    
    @staticmethod
    def _search_by_number_sync(filepath: str, number: str) -> List[str]:
        number_upper = number.strip().upper()
        results = []
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ø–æ –°–ù: {number_upper}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(filepath):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {filepath}")
                return results
                
            wb = openpyxl.load_workbook(filepath, read_only=True, data_only=True)
            sheet = wb["–¢–µ—Ä–º–∏–Ω–∞–ª—ã"] if "–¢–µ—Ä–º–∏–Ω–∞–ª—ã" in wb.sheetnames else None
            if not sheet:
                logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '–¢–µ—Ä–º–∏–Ω–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {filepath}")
                wb.close()
                return results
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ
            if sheet.max_row < 2:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
                wb.close()
                return results
                
            found = False
            for row in sheet.iter_rows(min_row=2, values_only=True):
                if len(row) < 17 or not row[5]:  # –°–ù –≤ —Å—Ç–æ–ª–±—Ü–µ F (–∏–Ω–¥–µ–∫—Å 5)
                    continue
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                sn = str(row[5]).strip().upper()
                if sn != number_upper:
                    continue
                found = True
                equipment_type = str(row[4]).strip() if row[4] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                model = str(row[6]).strip() if row[6] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                request_num = str(row[7]).strip() if row[7] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                status = str(row[8]).strip() if row[8] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                storage = str(row[13]).strip() if row[13] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                issue_status = str(row[14]).strip() if row[14] else ""
                engineer = str(row[15]).strip() if row[15] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                issue_date = str(row[16]).strip() if row[16] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"                
                # –†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                status_lower = status.lower()
                issue_status_lower = issue_status.lower()
                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                response_parts = [
                    f"<b>–°–ù:</b> <code>{sn}</code>",
                    f"<b>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{equipment_type}</code>",
                    f"<b>–ú–æ–¥–µ–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:</b> <code>{model}</code>",
                ]
                # --- –õ–æ–≥–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É ---
                if status_lower == "–Ω–∞ —Å–∫–ª–∞–¥–µ":
                    response_parts.append(f"<b>–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{status}</code>")
                    response_parts.append(f"<b>–ú–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> <code>{storage}</code>")
                elif status_lower in ["–Ω–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ", "–≤—ã–≤–µ–¥–µ–Ω–æ –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"]:
                    response_parts.append(f"<b>–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{status}</code> ‚Äî –∫–∞–∫ —Ç—Ä—É–ø –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ")
                    response_parts.append(f"<b>–ú–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> <code>{storage}</code> ‚Äî –º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏")
                elif status_lower == "–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ":
                    response_parts.append(f"<b>–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{status}</code>")
                    response_parts.append(f"<b>–ú–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> <code>{storage}</code>")
                    if issue_status_lower == "–≤—ã–¥–∞–Ω":
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë: –º–µ—Å—Ç–æ, –∏–Ω–∂–µ–Ω–µ—Ä–∞, –¥–∞—Ç—É
                        response_parts.append(f"<b>–ó–∞—è–≤–∫–∞:</b> <code>{request_num}</code>")
                        response_parts.append(f"<b>–í—ã–¥–∞–Ω –∏–Ω–∂–µ–Ω–µ—Ä—É:</b> <code>{engineer}</code>")
                        response_parts.append(f"<b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> <code>{issue_date}</code>")
                    # –ï—Å–ª–∏ –Ω–µ –≤—ã–¥–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                else:
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    response_parts.append(f"<b>–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{status}</code>")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –ø–æ –¢–ó ‚Äî –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                header = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ</b>"
                result_text = header + "\n" + "\n".join(response_parts)
                results.append(result_text)
            wb.close()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
            if found:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ –°–ù: {number_upper}")
            else:
                logger.info(f"‚ùå –¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –°–ù: {number_upper}")
                
        except openpyxl.utils.exceptions.InvalidFileException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª): {filepath} - {e}")
        except openpyxl.utils.exceptions.IllegalCharacterError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã): {filepath} - {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel {filepath}: {e}", exc_info=True)
        return results


async def handle_search(update: Update, query: str):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if update.message.chat.type == 'private':
        user = update.effective_user
        if not user.username or not access_manager.is_allowed(user.username.lower()):
            await update.message.reply_text(
                "–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π, –¥—è–¥—è?\n"
                "–ù–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ –≤—Ö–æ–¥–∏.\n"
                "–•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–ª–∞—Ç–∏ –±–∞–±–∫–∏ –∏–ª–∏ –ª–µ–∂–∏ –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ –¥–æ —É—Ç—Ä–∞."
            )
            return
    number = extract_number(query)
    if not number:
        await update.message.reply_text(
            "–¢—ã —á—ë, –±—Ä–∞—Ç–∞–Ω, –ø–æ –ø—å—è–Ω–∏ –ø–µ—á–∞—Ç–∞–µ—à—å?\n"
            "–°–ù ‚Äî —ç—Ç–æ —Ç–∏–ø–∞ <code>AB123456</code>, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –±–µ–∑ –Ω–æ—Å–∫–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –∞ —Ç–æ –≤—ã–∫–∏–Ω—É –≤ —Ä–µ–∫—É.",
            parse_mode='HTML'
        )
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await update.message.reply_text(
            f"üîç –ö–æ–ø–∞—é –≤ –∞—Ä—Ö–∏–≤–∞—Ö... –ì–¥–µ-—Ç–æ –±—ã–ª —ç—Ç–æ—Ç <code>{number}</code>...\n"
            "–ï—Å–ª–∏ –Ω–µ —Å–ø—ë—Ä–ª–∏, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ ‚Äî –Ω–∞–π–¥—É.",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return
    global LAST_FILE_ID, LAST_FILE_DATE, LAST_FILE_DRIVE_TIME, LAST_FILE_LOCAL_PATH
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if not LAST_FILE_ID or not LAST_FILE_LOCAL_PATH:
        logger.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
        try:
            await update.message.reply_text(
                "–ê—Ä—Ö–∏–≤—ã –ø—É—Å—Ç—ã, –±—Ä–∞—Ç.\n"
                "–õ–∏–±–æ —Ñ–∞–π–ª —Å–æ–∂–≥–ª–∏, –ª–∏–±–æ –µ–≥–æ –µ—â—ë –Ω–µ –ø–æ–¥–∫–∏–Ω—É–ª–∏.\n"
                "–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ ‚Äî –º–æ–∂–µ—Ç, –∫—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ —Å–¥–æ—Ö–Ω–µ—Ç –∏ –∑–∞–≥—Ä—É–∑–∏—Ç."
            )
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return
    if not os.path.exists(LAST_FILE_LOCAL_PATH):
        logger.warning(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {LAST_FILE_LOCAL_PATH}")
        try:
            await update.message.reply_text(
                "–§–∞–π–ª –±—ã–ª, –Ω–æ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–µ—Ç.\n"
                "–ö—Ç–æ-—Ç–æ —Å–ª–∏–ª –±–∞–∑—É –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–¥–æ—Ö.\n"
                "–ñ–¥–∏, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∑–∞–ª—å—ë—Ç."
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–∞–π–ª–∞ –≤ Google Drive
    try:
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        current_drive_time = fm.get_file_modified_time(LAST_FILE_ID)
        if not current_drive_time:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {LAST_FILE_ID}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
            local_time = datetime.fromtimestamp(os.path.getmtime(LAST_FILE_LOCAL_PATH), tz=timezone.utc)
            if LAST_FILE_DRIVE_TIME is None or current_drive_time > LAST_FILE_DRIVE_TIME:
                logger.info(f"üîÑ –§–∞–π–ª –≤ –æ–±–ª–∞–∫–µ –Ω–æ–≤–µ–µ ({current_drive_time.isoformat()} > {LAST_FILE_DRIVE_TIME}). –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
                try:
                    if fm.download_file(LAST_FILE_ID, LAST_FILE_LOCAL_PATH):
                        LAST_FILE_DRIVE_TIME = current_drive_time
                        logger.info(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {LAST_FILE_LOCAL_PATH}")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é.")
                        try:
                            await update.message.reply_text(
                                "–§–∞–π–ª –æ–±–Ω–æ–≤–∏–ª—Å—è, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –µ–≥–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å.\n"
                                "–†–∞–±–æ—Ç–∞—é –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ—Å—è–∫–∏."
                            )
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
                    try:
                        await update.message.reply_text(
                            "–§–∞–π–ª –æ–±–Ω–æ–≤–∏–ª—Å—è, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å.\n"
                            "–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                        )
                    except Exception as e_inner:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e_inner}")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã.\n"
                "–†–∞–±–æ—Ç–∞—é –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            )
        except Exception as e_inner:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e_inner}")
    # –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        lds = LocalDataSearcher()
        results = await lds.search_by_number_async(LAST_FILE_LOCAL_PATH, number)
        if not results:
            await update.message.reply_text(
                f"–¢–µ—Ä–º–∏–Ω–∞–ª —Å –°–ù <code>{number}</code>?\n"
                "–ù–µ—Ç—É. –ù–∏ –≤ –±–∞–∑–µ, –Ω–∏ –≤ –ø–æ–¥–≤–∞–ª–µ, –Ω–∏ –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ '–í–µ—Å—Ç—ã'.\n"
                "–ú–æ–∂–µ—Ç, –æ–Ω —É–∂–µ –≤ –º–µ—Ç–∞–ª–ª–æ–ª–æ–º–µ... –∏–ª–∏ —Ç—ã –≤—Ç–∏—Ä–∞–µ—à—å –º–Ω–µ –æ—á–∫–∏?",
                parse_mode='HTML'
            )
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            try:
                if len(result) > 4096:
                    truncated = result[:4050] + "\n<i>... (–æ–±—Ä–µ–∑–∞–Ω–æ)</i>"
                    await update.message.reply_text(truncated, parse_mode='HTML')
                else:
                    await update.message.reply_text(result, parse_mode='HTML')
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                try:
                    await update.message.reply_text(
                        "–ù–∞—à—ë–ª —Ç–µ—Ä–º–∏–Ω–∞–ª, –Ω–æ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å ‚Äî —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–∫–∞–∂–∏ –∞–¥–º–∏–Ω—É."
                    )
                except Exception as e_inner:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback-—Å–æ–æ–±—â–µ–Ω–∏—è: {e_inner}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Excel: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ë–∞–∑–∞ –µ—Å—Ç—å, –Ω–æ —á–∏—Ç–∞—Ç—å –Ω–µ –º–æ–≥—É ‚Äî –≤–∏–¥–∏–º–æ, –∫—Ç–æ-—Ç–æ –æ–ø—è—Ç—å –≥–æ–≤–Ω–æ–∫–æ–¥ –Ω–∞–ø–∏—Å–∞–ª.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )
        except Exception as e_inner:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è: {e_inner}")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /refresh ---
async def refresh_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å Google Drive (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if not update.message or not update.effective_user:
        return
    user = update.effective_user
    if not user.username or user.username.lower() not in {u.lower() for u in ALLOWED_USERS}:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    global LAST_FILE_ID, LAST_FILE_DATE, LAST_FILE_DRIVE_TIME, LAST_FILE_LOCAL_PATH
    if not LAST_FILE_ID or not LAST_FILE_LOCAL_PATH:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    
    try:
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å Google Drive...")
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ñ–∞–π–ª–∞ –≤ Google Drive
        current_drive_time = fm.get_file_modified_time(LAST_FILE_ID)
        if not current_drive_time:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è existing —Ñ—É–Ω–∫—Ü–∏—é
        if fm.download_file(LAST_FILE_ID, LAST_FILE_LOCAL_PATH):
            LAST_FILE_DRIVE_TIME = current_drive_time
            await update.message.reply_text(
                f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {current_drive_time.strftime('%d.%m.%Y %H:%M:%S')}"
            )
            logger.info(f"üîÑ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.username}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç–∞—Ö."""
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    bot_username = context.bot.username.lower()
    chat_type = update.message.chat.type

    # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—ë (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω)
    if chat_type == 'private':
        user = update.effective_user
        if not user.username or not access_manager.is_allowed(user.username.lower()):
            await update.message.reply_text(
                "–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π, –¥—è–¥—è?\n"
                "–ù–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ –≤—Ö–æ–¥–∏.\n"
                "–•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–ª–∞—Ç–∏ –±–∞–±–∫–∏ –∏–ª–∏ –ª–µ–∂–∏ –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ –¥–æ —É—Ç—Ä–∞."
            )
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if text.startswith("/s"):
            query = text[2:].strip()
            if not query:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/s AB123456</code>",
                    parse_mode='HTML'
                )
                return
            await handle_search(update, query)
            return
        elif text.startswith('/'):
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ <code>/s –°–ù</code> ‚Äî –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É\n"
                "‚Ä¢ <code>/path</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏\n"
                "‚Ä¢ <code>/reload_lists</code> ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
                "‚Ä¢ <code>/restart</code> ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "‚Ä¢ <code>/refresh</code> ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫–ª–∞–¥–∞\n",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
                "‚Ä¢ <code>/s –°–ù</code> ‚Äî –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É\n"
                "‚Ä¢ <code>/path</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏\n"
                "‚Ä¢ <code>/reload_lists</code> ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–∞\n"
                "‚Ä¢ <code>/restart</code> ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "‚Ä¢ <code>/refresh</code> ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫–ª–∞–¥–∞\n",
                parse_mode='HTML'
            )
        return

    # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö (group/supergroup) ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if chat_type in ['group', 'supergroup']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–≤—Å—ë –µ—â—ë –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã /s —Ä–∞–±–æ—Ç–∞–ª)
        if text.startswith("/s"):
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –±–æ—Ç—É: /s@Sklad_bot
            if f"@{bot_username}" in text.split()[0] or not ' ' in text:  # /s@bot –∏–ª–∏ /s —Ç–µ–∫—Å—Ç
                query = re.sub(r'^/s(?:@[\w_]+)?\s*', '', text).strip()
                if not query:
                    await update.message.reply_text(
                        "–£–∫–∞–∂–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>/s AB123456</code>",
                        parse_mode='HTML'
                    )
                    return
                await handle_search(update, query)
                return
            else:
                # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /s, –Ω–æ –Ω–µ –¥–ª—è –Ω–∞—Å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: @Sklad_bot ...
        mention_match = re.match(rf'@{re.escape(bot_username)}\s*(.+)', text, re.IGNORECASE)
        if mention_match:
            query = mention_match.group(1).strip()
            if not query:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞.\n"
                    "–ü—Ä–∏–º–µ—Ä: @Sklad_bot AB123456",
                    parse_mode='HTML'
                )
                return
            await handle_search(update, query)
            return

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return


def main():
    try:
        init_config()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccessManager
    global access_manager
    gs = GoogleServices()
    access_manager = AccessManager(gs.drive)
    access_manager.update_lists() 
    preload_latest_file()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("path", show_path)) 
    app.add_handler(CommandHandler("reload_lists", reload_lists))
    app.add_handler(CommandHandler("restart", restart_bot))
    app.add_handler(CommandHandler("refresh", refresh_file))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()

if __name__ == '__main__':
    main()