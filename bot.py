import logging
import re
import os
import base64
import json
import time
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import openpyxl
import warnings

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç openpyxl
warnings.filterwarnings("ignore", message="Data Validation extension is not supported", category=UserWarning)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CITY = '–í–æ—Ä–æ–Ω–µ–∂'
SCOPES = ['https://www.googleapis.com/auth/drive']
LOCAL_CACHE_DIR = "./local_cache"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
CREDENTIALS_FILE: str = ""
TELEGRAM_TOKEN: str = ""
PARENT_FOLDER_ID: str = ""
TEMP_FOLDER_ID: str = ""
ROOT_FOLDER_YEAR: str = ""

# --- –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
ALLOWED_USERS = {'tupikin_ik', 'yoptvayou'}

def get_credentials_path() -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Google Credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    encoded = os.getenv("GOOGLE_CREDS_BASE64")
    if not encoded:
        raise RuntimeError("GOOGLE_CREDS_BASE64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    try:
        decoded = base64.b64decode(encoded).decode('utf-8')
        creds = json.loads(decoded)
        temp_path = "temp_google_creds.json"
        with open(temp_path, 'w') as f:
            json.dump(creds, f)
        logger.info(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {temp_path}")
        return temp_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è GOOGLE_CREDS_BASE64: {e}")
        raise

def init_config():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    global CREDENTIALS_FILE, TELEGRAM_TOKEN, PARENT_FOLDER_ID, TEMP_FOLDER_ID, ROOT_FOLDER_YEAR
    CREDENTIALS_FILE = get_credentials_path()
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
    PARENT_FOLDER_ID = os.getenv("PARENT_FOLDER_ID", "")
    TEMP_FOLDER_ID = os.getenv("TEMP_FOLDER_ID", "")
    ROOT_FOLDER_YEAR = str(datetime.now().year)
    if not TELEGRAM_TOKEN or not PARENT_FOLDER_ID:
        missing = []
        if not TELEGRAM_TOKEN: missing.append("TELEGRAM_TOKEN")
        if not PARENT_FOLDER_ID: missing.append("PARENT_FOLDER_ID")
        raise RuntimeError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
    os.makedirs(LOCAL_CACHE_DIR, exist_ok=True)
    logger.info(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à: {os.path.abspath(LOCAL_CACHE_DIR)}")

class GoogleServices:
    """–û–¥–∏–Ω–æ—á–∫–∞ –¥–ª—è Google API."""
    _instance = None
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
            cls._instance.drive = build('drive', 'v3', credentials=creds)
        return cls._instance

def extract_number(query: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Ç–∏—Ä–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None.
    """
    if not query:
        return None
    clean = re.sub(r'\s+', '', query.strip())  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
    if re.fullmatch(r'[A-Za-z0-9\-]+', clean):
        return clean
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å."""
    if not update.message:
        return
    user = update.effective_user
    chat_type = update.message.chat.type
    if chat_type == 'private' and (not user.username or user.username not in ALLOWED_USERS):
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤."
        )
        return
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ <code>/s 123456</code> ‚Äî –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É\n"
        "‚Ä¢ <code>/path</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏\n"
        "‚Ä¢ <code>@–≤–∞—à_–±–æ—Ç 123456</code> ‚Äî –≤—ã–∑–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é"
    )

async def show_path(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å."""
    if not update.message:
        return
    user = update.effective_user
    if update.message.chat.type == 'private' and (not user.username or user.username not in ALLOWED_USERS):
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤."
        )
        return
    try:
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        root_id = PARENT_FOLDER_ID
        items = fm.list_files_in_folder(root_id, max_results=100)
        text = f"üóÇ <b>–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞</b> (ID: <code>{root_id}</code>)\n"
        if not items:
            text += "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        else:
            folders = [i for i in items if i['mimeType'] == 'application/vnd.google-apps.folder']
            files = [i for i in items if i['mimeType'] != 'application/vnd.google-apps.folder']
            if folders:
                text += "<b>–ü–æ–¥–ø–∞–ø–∫–∏:</b>\n"
                for f in sorted(folders, key=lambda x: x['name'].lower()):
                    text += f"üìÅ <code>{f['name']}/</code>\n"
                text += "\n"
            if files:
                text += "<b>–§–∞–π–ª—ã:</b>\n"
                for f in sorted(files, key=lambda x: x['name'].lower()):
                    size = f" ({f['size']} –±–∞–π—Ç)" if f.get('size') else ""
                    text += f"üìÑ <code>{f['name']}</code>{size}\n"
        await update.message.reply_text(text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /path: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

class FileManager:
    """–†–∞–±–æ—Ç–∞ —Å Google Drive."""
    def __init__(self, drive):
        self.drive = drive

    def find_folder(self, parent_id: str, name: str) -> Optional[str]:
        query = f"mimeType='application/vnd.google-apps.folder' and name='{name}' and '{parent_id}' in parents and trashed=false"
        try:
            res = self.drive.files().list(q=query, fields="files(id)").execute()
            return res['files'][0]['id'] if res['files'] else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ '{name}': {e}")
            return None

    def find_file(self, folder_id: str, filename: str) -> Optional[str]:
        query = f"name='{filename}' and '{folder_id}' in parents and trashed=false"
        try:
            res = self.drive.files().list(q=query, fields="files(id)").execute()
            return res['files'][0]['id'] if res['files'] else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ '{filename}': {e}")
            return None

    def get_file_modified_time(self, file_id: str) -> Optional[datetime]:
        try:
            info = self.drive.files().get(fileId=file_id, fields="modifiedTime").execute()
            t = info['modifiedTime']
            dt = datetime.strptime(t, "%Y-%m-%dT%H:%M:%S.%fZ")
            return dt.replace(tzinfo=timezone.utc)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None

    def download_file(self, file_id: str, local_path: str) -> bool:
        try:
            request = self.drive.files().get_media(fileId=file_id)
            with open(local_path, 'wb') as fh:
                downloader = MediaIoBaseDownload(fh, request)
                done = False
                while not done:
                    status, done = downloader.next_chunk()
            logger.info(f"‚úÖ –§–∞–π–ª {file_id} —Å–∫–∞—á–∞–Ω –≤ {local_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file_id}: {e}")
            return False

    def list_files_in_folder(self, folder_id: str, max_results: int = 100) -> List[Dict]:
        try:
            query = f"'{folder_id}' in parents and trashed=false"
            res = self.drive.files().list(q=query, pageSize=max_results, fields="files(id, name, mimeType, size)").execute()
            return res.get('files', [])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id}: {e}")
            return []

class LocalDataSearcher:
    """–ü–æ–∏—Å–∫ –≤ Excel –ø–æ –°–ù –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É."""
    @staticmethod
    def search_by_number(filepath: str, number: str) -> List[str]:
        number_upper = number.strip().upper()
        results = []
        try:
            wb = openpyxl.load_workbook(filepath, read_only=True, data_only=True)
            sheet = wb["–¢–µ—Ä–º–∏–Ω–∞–ª—ã"] if "–¢–µ—Ä–º–∏–Ω–∞–ª—ã" in wb.sheetnames else None
            if not sheet:
                logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '–¢–µ—Ä–º–∏–Ω–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {filepath}")
                wb.close()
                return results

            # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (A=1): E=5, G=7, H=8, I=9, N=14, O=15, P=16, Q=17
            for row in sheet.iter_rows(min_row=2, values_only=True):
                if len(row) < 17 or not row[5]:  # –°–ù –≤ F (6)
                    continue
                sn = str(row[5]).strip().upper()
                if sn != number_upper:
                    continue

                equipment_type = str(row[4]).strip() if row[4] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                model = str(row[6]).strip() if row[6] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                request_num = str(row[7]).strip() if row[7] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                status = str(row[8]).strip() if row[8] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                storage = str(row[13]).strip() if row[13] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                issue_status = str(row[14]).strip() if row[14] else ""
                engineer = str(row[15]).strip() if row[15] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                issue_date = str(row[16]).strip() if row[16] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                response_parts = [
                    f"<b>–°–ù:</b> <code>{sn}</code>",
                    f"<b>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{equipment_type}</code>",
                    f"<b>–ú–æ–¥–µ–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:</b> <code>{model}</code>",
                    f"<b>–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b> <code>{status}</code>"
                ]

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ —É—Å–ª–æ–≤–∏—è–º
                if status == "–ù–∞ —Å–∫–ª–∞–¥–µ":
                    if storage != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                        response_parts.append(f"<b>–ú–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> <code>{storage}</code>")

                elif status == "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ" and issue_status == "–í—ã–¥–∞–Ω":
                    response_parts.extend([
                        f"<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{request_num}</code>",
                        f"<b>–í—ã–¥–∞–Ω –∏–Ω–∂–µ–Ω–µ—Ä—É:</b> <code>{engineer}</code>",
                        f"<b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> <code>{issue_date}</code>"
                    ])

                elif status in ["–ù–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ", "–í—ã–≤–µ–¥–µ–Ω–æ –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"]:
                    if storage != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                        response_parts.append(f"<b>–ú–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> <code>{storage}</code>")

                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã ‚Äî —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

                result_text = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ</b>\n" + "\n".join(response_parts)
                results.append(result_text)

            wb.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel {filepath}: {e}", exc_info=True)
        return results

async def handle_search(update: Update, query: str):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å."""
    if not update.message:
        return
    user = update.effective_user
    if update.message.chat.type == 'private' and (not user.username or user.username not in ALLOWED_USERS):
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤."
        )
        return

    number = extract_number(query)
    if not number:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: AB123456 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).",
            parse_mode='HTML'
        )
        return

    await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: <code>{number}</code>...", parse_mode='HTML')

    try:
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        lds = LocalDataSearcher()
        today = datetime.now()
        file_id = None
        used_date = None

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        for days_back in range(31):
            target_date = today - timedelta(days=days_back)
            filename = f"–ê–ü–ü_–°–∫–ª–∞–¥_{target_date.strftime('%d%m%y')}_{CITY}.xlsm"

            acts = fm.find_folder(PARENT_FOLDER_ID, "–∞–∫—Ç—ã")
            if not acts: continue

            month_num = target_date.month
            month_name = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
                          "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"][month_num - 1]
            month_folder = fm.find_folder(acts, f"{target_date.strftime('%m')} - {month_name}")
            if not month_folder: continue

            date_folder = fm.find_folder(month_folder, target_date.strftime('%d%m%y'))
            if not date_folder: continue

            file_id = fm.find_file(date_folder, filename)
            if file_id:
                used_date = target_date
                break

        if not file_id:
            await update.message.reply_text(
                "–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
            )
            return

        local_file = os.path.join(LOCAL_CACHE_DIR, f"cache_{used_date.strftime('%Y%m%d')}.xlsm")
        drive_time = fm.get_file_modified_time(file_id)
        if not drive_time:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_needed = True
        if os.path.exists(local_file):
            local_time = datetime.fromtimestamp(os.path.getmtime(local_file), tz=timezone.utc)
            if drive_time <= local_time:
                download_needed = False

        if download_needed:
            if not fm.download_file(file_id, local_file):
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")
                return

        results = lds.search_by_number(local_file, number)
        if not results:
            await update.message.reply_text(
                f"–¢–µ—Ä–º–∏–Ω–∞–ª —Å –°–ù <code>{number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )
            return

        for result in results:
            if len(result) > 4096:
                result = result[:4050] + "\n<i>... (–æ–±—Ä–µ–∑–∞–Ω–æ)</i>"
            await update.message.reply_text(result, parse_mode='HTML')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.\n"
            "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å."""
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    bot_username = context.bot.username.lower()

    if text.startswith("/s"):
        query = text[2:].strip()
        if not query:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/s AB123456</code>",
                parse_mode='HTML'
            )
            return
        await handle_search(update, query)
        return

    mention_match = re.match(rf'@{re.escape(bot_username)}\s*(.+)', text, re.IGNORECASE)
    if mention_match:
        query = mention_match.group(1).strip()
        if not query:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: @–≤–∞—à_–±–æ—Ç AB123456",
                parse_mode='HTML'
            )
            return
        await handle_search(update, query)
        return

    if text.startswith('/'):
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ <code>/s 123456</code> ‚Äî –ø–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\n"
            "‚Ä¢ <code>/path</code> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–∫–∏\n"
            "‚Ä¢ <code>@–≤–∞—à_–±–æ—Ç 123456</code> ‚Äî –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫",
            parse_mode='HTML'
        )

def main():
    try:
        init_config()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("path", show_path))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.COMMAND, handle_message))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()

if __name__ == '__main__':
    main()
