import logging
import re
import os
import base64
import json
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è httpx, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å verbosity
logging.getLogger("httpx").setLevel(logging.WARNING)

# ‚Äî‚Äî‚Äî –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –î–µ–∫–æ–¥–∏—Ä—É–µ–º Google Credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_credentials_path():
    encoded = os.getenv("GOOGLE_CREDS_BASE64")
    if not encoded:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDS_BASE64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 ‚Üí JSON
    decoded = base64.b64decode(encoded).decode('utf-8')
    creds = json.loads(decoded)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–Ω—É–∂–µ–Ω –¥–ª—è Google API)
    temp_path = "temp_google_creds.json"
    with open(temp_path, 'w') as f:
        json.dump(creds, f)
    return temp_path

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CREDENTIALS_FILE = get_credentials_path()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")       # –¢–æ–∫–µ–Ω –æ—Ç @BotFather
PARENT_FOLDER_ID = os.getenv("PARENT_FOLDER_ID")   # –ü–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç "2025"
TEMP_FOLDER_ID = os.getenv("TEMP_FOLDER_ID")       # –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏–π
# ROOT_FOLDER_YEAR —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
ROOT_FOLDER_YEAR = str(datetime.now().year)
CITY = '–í–æ—Ä–æ–Ω–µ–∂'

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

class GoogleServices:
    """–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è Google API —Å–µ—Ä–≤–∏—Å–æ–≤"""
    def __init__(self):
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        self.drive = build('drive', 'v3', credentials=creds)
        self.sheets = build('sheets', 'v4', credentials=creds)

class FileManager:
    """–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –Ω–∞ Google –î–∏—Å–∫–µ"""
    def __init__(self, drive_service):
        self.drive = drive_service

    def find_folder(self, parent_id: str, name: str) -> str:
        """–ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        query = f"mimeType='application/vnd.google-apps.folder' and name='{name}' " \
                f"and '{parent_id}' in parents and trashed=false"
        result = self.drive.files().list(q=query, fields="files(id, name)").execute()
        files = result.get('files', [])
        if files:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ '{name}' (ID: {files[0]['id']}) –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_id}")
            return files[0]['id']
        else:
            logger.debug(f"–ü–∞–ø–∫–∞ '{name}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_id}")
            return None

    def find_file(self, folder_id: str, filename: str) -> str:
        """–ù–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ"""
        query = f"name='{filename}' and '{folder_id}' in parents and trashed=false"
        result = self.drive.files().list(q=query, fields="files(id, name)").execute()
        files = result.get('files', [])
        if files:
            logger.debug(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª '{filename}' (ID: {files[0]['id']}) –≤ –ø–∞–ø–∫–µ {folder_id}")
            return files[0]['id']
        else:
            logger.debug(f"–§–∞–π–ª '{filename}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {folder_id}")
            return None

        def create_sheets_copy(self, file_id: str, name: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é Excel –∫–∞–∫ Google –¢–∞–±–ª–∏—Ü—É –≤ TEMP_FOLDER_ID"""
        metadata = {
            'name': name,
            'parents': [TEMP_FOLDER_ID],
            'mimeType': 'application/vnd.google-apps.spreadsheet'
        }
        try:
            file = self.drive.files().copy(fileId=file_id, body=metadata).execute()
            logger.info(f"–ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {name} (ID: {file['id']}) –≤ –ø–∞–ø–∫–µ —Å ID {TEMP_FOLDER_ID}")
            return file['id']
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å ID {file_id} –≤ –ø–∞–ø–∫—É —Å ID {TEMP_FOLDER_ID} —Å –∏–º–µ–Ω–µ–º '{name}': {e}"
            logger.error(error_msg)
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª–æ–≥ traceback –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            # import traceback
            # logger.error(traceback.format_exc()) 
            return None

    def safe_delete(self, file_id: str):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤ TEMP_FOLDER_ID"""
        try:
            file_info = self.drive.files().get(fileId=file_id, fields="parents").execute()
            if TEMP_FOLDER_ID in file_info.get('parents', []):
                self.drive.files().delete(fileId=file_id).execute()
                logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {file_id}")
            else:
                logger.warning(f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ (–Ω–µ –≤ TEMP): {file_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
    def list_files_in_folder(self, folder_id: str, max_results: int = 100) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ Google Drive"""
        try:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
            query = f"'{folder_id}' in parents and trashed=false"
            results = self.drive.files().list(
                q=query,
                pageSize=max_results,
                fields="nextPageToken, files(id, name, mimeType, size)"
            ).execute()
            items = results.get('files', [])
            return items
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ {folder_id}: {e}")
            return []

class DataSearcher:
    """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü–µ"""
    def __init__(self, sheets_service):
        self.sheets = sheets_service

    def read_sheet(self, spreadsheet_id: str, range_name: str) -> list:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.sheets.spreadsheets().values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            return result.get('values', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []

    def search_by_number(self, rows: list, target_number: str) -> list:
        """
        –ò—â–µ—Ç —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü F (–∏–Ω–¥–µ–∫—Å 5) == target_number (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        """
        target_number = target_number.strip().upper()
        results = []
        for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(row) > 5 and row[5].strip().upper() == target_number:
                # –ë–µ—Ä—ë–º A-Z, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
                cleaned = [cell.strip() for cell in row[:26] if cell.strip()]
                results.append(" | ".join(cleaned))
        return results

# ‚Äî‚Äî‚Äî –û–°–ù–û–í–ù–û–ô –ë–û–¢ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–∫–µ –∏ –≥—Ä—É–ø–ø–∞—Ö)"""
    if update.message: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "‚Ä¢ `/s 123456` - –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É\n"
            "‚Ä¢ `/path` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏\n"
            "‚Ä¢ `/test –î–î–ú–ú–ì–ì` - —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/test 010125`)\n"
            "‚Ä¢ `@–≤–∞—à_–±–æ—Ç 123456` - —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö"
        )

async def show_path(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ Google Drive –ø–æ PARENT_FOLDER_ID"""
    if not update.message:
        return

    try:
        await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –Ω–∞ Google Drive...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ Google
        gs = GoogleServices()
        fm = FileManager(gs.drive)

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (PARENT_FOLDER_ID)
        root_folder_id = PARENT_FOLDER_ID
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
        try:
            root_folder_info = gs.drive.files().get(fileId=root_folder_id, fields="name").execute()
            root_folder_name = root_folder_info.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        except Exception:
            root_folder_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞'
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ —Å ID {root_folder_id}")

        path_info = f"üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ Google Drive: `{root_folder_name}` (ID: `{root_folder_id}`)\n\n"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
        try:
            items = fm.list_files_in_folder(root_folder_id, max_results=100) # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è –Ω–∞—á–∞–ª–∞
            if not items:
                path_info += "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫."
            else:
                path_info += f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):\n"
                
                # –°–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏
                folders = sorted([item for item in items if item.get('mimeType') == 'application/vnd.google-apps.folder'], 
                                 key=lambda x: x.get('name', '').lower())
                # –ü–æ—Ç–æ–º —Ñ–∞–π–ª—ã
                files = sorted([item for item in items if item.get('mimeType') != 'application/vnd.google-apps.folder'], 
                               key=lambda x: x.get('name', '').lower())
                
                for folder in folders:
                    name = folder.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    fid = folder.get('id', 'N/A')
                    path_info += f"üìÅ `{name}/` (ID: `{fid}`)\n"
                    
                for file in files:
                    name = file.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    fid = file.get('id', 'N/A')
                    mime_type = file.get('mimeType', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                    size = file.get('size', None)
                    size_str = f" ({int(size)} –±–∞–π—Ç)" if size and size.isdigit() else ""
                    path_info += f"üìÑ `{name}`{size_str} (ID: `{fid}`, –¢–∏–ø: `{mime_type}`)\n"
                    
        except Exception as e:
            path_info += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏: {e}\n"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ {root_folder_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(path_info) > 4096:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            lines = path_info.split('\n')
            current_part = ""
            for line in lines:
                if len(current_part + line + '\n') > 4000: # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                    await update.message.reply_text(current_part, parse_mode='Markdown')
                    current_part = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ `/path`:\n" + line + '\n'
                else:
                    current_part += line + '\n'
            if current_part:
                await update.message.reply_text(current_part, parse_mode='Markdown')
        else:
            await update.message.reply_text(path_info, parse_mode='Markdown')

    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ Google Drive: {e}"
        logger.error(error_msg, exc_info=True) # –õ–æ–≥–∏—Ä—É–µ–º —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        if update.message:
            await update.message.reply_text(error_msg)

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ –¥–∞—Ç–µ"""
    if not update.message:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç - –¥–∞—Ç—É
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/test –î–î–ú–ú–ì–ì`\n"
            "–ü—Ä–∏–º–µ—Ä: `/test 010125`",
            parse_mode='Markdown'
        )
        return

    date_str = context.args[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (6 —Ü–∏—Ñ—Ä)
    if not (len(date_str) == 6 and date_str.isdigit()):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ù—É–∂–Ω–æ 6 —Ü–∏—Ñ—Ä: –î–î–ú–ú–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: `010125` –¥–ª—è 1 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞",
            parse_mode='Markdown'
        )
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ –¥–∞—Ç—ã
        day = date_str[:2]
        month = date_str[2:4]
        year_short = date_str[4:]
        year_full = f"20{year_short}" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ 21 –≤–µ–∫
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month_names = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
                       "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
        try:
            month_index = int(month) - 1
            if 0 <= month_index <= 11:
                month_name = month_names[month_index]
            else:
                month_name = "???"
        except (ValueError, IndexError):
            month_name = "???"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"–ê–ü–ü_–°–∫–ª–∞–¥_{date_str}_{CITY}.xlsm"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        path_structure = (
            f"{year_full}\n"
            f"  ‚îî‚îÄ‚îÄ –∞–∫—Ç—ã\n"
            f"      ‚îî‚îÄ‚îÄ {month} - {month_name}\n"
            f"          ‚îî‚îÄ‚îÄ {date_str}\n"
            f"              ‚îî‚îÄ‚îÄ {filename}"
        )
        
        response = (
            f"üìÖ –î–∞—Ç–∞: `{day}.{month}.20{year_short}`\n"
            f"üìÇ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∏ —Ñ–∞–π–ª:\n```\n{path_structure}\n```"
        )
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.",
            parse_mode='Markdown'
        )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if update.message:
        help_text = (
            "–ö–æ–∂–∞–Ω—ã–π, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π\n"
            "‚Ä¢ `/s 123456` - –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É\n"
            "‚Ä¢ `/path` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏\n"
            "‚Ä¢ `/test –î–î–ú–ú–ì–ì` - —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏\n"
            "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ: `@–≤–∞—à_–±–æ—Ç 123456`"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

def extract_number(query: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ None
    """
    if not query:
        return None
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    clean_query = query.strip()
    if clean_query.isdigit():
        return clean_query
    return None

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è handle_query")
        return
    message = update.message
    number = extract_number(query)
    if not number:
        await message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: `123456`", parse_mode='Markdown')
        return
    await message.reply_text(f"üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É: `{number}`", parse_mode='Markdown')
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        gs = GoogleServices()
        fm = FileManager(gs.drive)
        ds = DataSearcher(gs.sheets)
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
        today = datetime.now()
        yesterday = today - timedelta(days=1)
        dates_to_try = [today, yesterday]
        file_id = None
        used_date = None
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {number}")
        logger.info(f"PARENT_FOLDER_ID (–∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ '2025'): {PARENT_FOLDER_ID}")
        for target_date in dates_to_try:
            filename = f"–ê–ü–ü_–°–∫–ª–∞–¥_{target_date.strftime('%d%m%y')}_{CITY}.xlsm"
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å PARENT_FOLDER_ID (—ç—Ç–æ —É–∂–µ –ø–∞–ø–∫–∞ "2025")
            root_folder = PARENT_FOLDER_ID
            
            # –ù–∞–π—Ç–∏ –ø–∞–ø–∫—É "–∞–∫—Ç—ã"
            logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ '–∞–∫—Ç—ã' –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ '{root_folder}'")
            acts_folder = fm.find_folder(root_folder, "–∞–∫—Ç—ã")
            if not acts_folder:
                logger.warning(f"–ü–∞–ø–∫–∞ '–∞–∫—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ (ID: {root_folder})")
                continue
            logger.debug(f"–ü–∞–ø–∫–∞ '–∞–∫—Ç—ã' –Ω–∞–π–¥–µ–Ω–∞: ID={acts_folder}")
            
            # –ù–∞–π—Ç–∏ –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞: "01 - —è–Ω–≤–∞—Ä—å"
            month_names = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
                           "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
            month_num = target_date.month
            month_folder_name = f"{target_date.strftime('%m')} - {month_names[month_num - 1]}"
            logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞ '{month_folder_name}' –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ '–∞–∫—Ç—ã' '{acts_folder}'")
            month_folder = fm.find_folder(acts_folder, month_folder_name)
            if not month_folder:
                logger.warning(f"–ü–∞–ø–∫–∞ –º–µ—Å—è—Ü–∞ '{month_folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '–∞–∫—Ç—ã' (ID: {acts_folder})")
                continue
            logger.debug(f"–ü–∞–ø–∫–∞ –º–µ—Å—è—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: ID={month_folder}")
            
            # –ù–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π: "–î–î–ú–ú–ì–ì"
            date_folder_name = target_date.strftime('%d%m%y')
            logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–æ–π '{date_folder_name}' –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞ '{month_folder}'")
            date_folder = fm.find_folder(month_folder, date_folder_name)
            if not date_folder:
                logger.warning(f"–ü–∞–ø–∫–∞ —Å –¥–∞—Ç–æ–π '{date_folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ –º–µ—Å—è—Ü–∞ (ID: {month_folder})")
                continue
            logger.debug(f"–ü–∞–ø–∫–∞ —Å –¥–∞—Ç–æ–π –Ω–∞–π–¥–µ–Ω–∞: ID={date_folder}")
            
            # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ —Å –¥–∞—Ç–æ–π
            logger.debug(f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ '{filename}' –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–æ–π '{date_folder}'")
            file_id = fm.find_file(date_folder, filename)
            if file_id:
                logger.info(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ID={file_id}")
                used_date = target_date
                break # –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            else:
                logger.warning(f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ —Å –¥–∞—Ç–æ–π (ID: {date_folder})")
                
        if not file_id:
            await message.reply_text("‚ùå –§–∞–π–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        date_str = used_date.strftime("%d.%m.%Y")
        await message.reply_text(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∑–∞ {date_str}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É
        temp_name = f"TEMP_{filename.replace('.xlsm', '')}"
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ {file_id} —Å –∏–º–µ–Ω–µ–º {temp_name} –≤ –ø–∞–ø–∫–µ {TEMP_FOLDER_ID}")
        spreadsheet_id = fm.create_sheets_copy(file_id, temp_name)
        if not spreadsheet_id:
            error_message_for_user = (
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '{filename}'.\n"
                f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏ —Å –∏–º–µ–Ω–µ–º '{temp_name}' –≤ –ø–∞–ø–∫–µ —Å ID '{TEMP_FOLDER_ID}' –Ω–µ —É–¥–∞–ª–∞—Å—å."
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ {file_id} —Å –∏–º–µ–Ω–µ–º {temp_name}")
            await message.reply_text(error_message_for_user)
        return
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logger.debug(f"–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã {spreadsheet_id}, –ª–∏—Å—Ç '–¢–µ—Ä–º–∏–Ω–∞–ª—ã!A:Z'")
        rows = ds.read_sheet(spreadsheet_id, "–¢–µ—Ä–º–∏–Ω–∞–ª—ã!A:Z")
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã {spreadsheet_id}")
        fm.safe_delete(spreadsheet_id)  # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
        if not rows:
            await message.reply_text("üìã –õ–∏—Å—Ç '–¢–µ—Ä–º–∏–Ω–∞–ª—ã' –ø—É—Å—Ç.")
            return

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É (–±–µ–∑ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –°–ù)
        logger.debug(f"–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ '{number}' –≤ –¥–∞–Ω–Ω—ã—Ö")
        results = ds.search_by_number(rows, number)
        if results:
            response = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ `{number}`:\n\n" + "\n\n".join(results)
            if len(response) > 4096:
                response = response[:4090] + "\n..."
        else:
            response = f"‚ùå –ó–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º `{number}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        await message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–∫–∏
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    bot_username = context.bot.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    is_command_s = text.startswith("/s")
    is_command_path = text.startswith("/path")
    is_command_test = text.startswith("/test")
    is_mention = re.match(rf'@{re.escape(bot_username)}\b', text, re.IGNORECASE)

    if is_command_path:
        await show_path(update, context)
        return
    elif is_command_test:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /test –æ—Ç–¥–µ–ª—å–Ω–æ
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /test
        command_parts = text.split(' ', 1)
        args = command_parts[1:] if len(command_parts) > 1 else []
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π context –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        context.args = args
        await test_command(update, context)
        return
    elif is_command_s or is_mention:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if is_command_s:
            query = ' '.join(context.args) if context.args else ''
        else:
            query = re.sub(rf'@{re.escape(bot_username)}\s*', '', text, flags=re.IGNORECASE).strip()
        
        await handle_query(update, context, query)
        return
    elif text.startswith('/'):
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
        await unknown_command(update, context)
        return

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_TOKEN", "PARENT_FOLDER_ID", "TEMP_FOLDER_ID"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("path", show_path))
    app.add_handler(CommandHandler("test", test_command))
    app.add_handler(CommandHandler("s", lambda u, c: handle_query(u, c, ' '.join(c.args) if c.args else '')))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    app.add_handler(MessageHandler(
        filters.TEXT & (filters.ChatType.CHANNEL | filters.ChatType.GROUPS | filters.ChatType.PRIVATE),
        handle_message
    ))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ª–∏—á–∫–∞, –≥—Ä—É–ø–ø—ã, –∫–∞–Ω–∞–ª—ã (–ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏).")
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ROOT_FOLDER_YEAR={ROOT_FOLDER_YEAR}, CITY={CITY}")
    app.run_polling()

if __name__ == '__main__':
    main()
